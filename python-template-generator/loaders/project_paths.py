"""Auto-generated paths dataclass for the loaders module.

DO NOT EDIT THIS FILE MANUALLY!
Generated from pyproject.toml [tool.project_paths] configuration.
To regenerate, run: python generate_paths_simple.py
"""

from pathlib import Path
from dataclasses import dataclass, field
from typing import Dict


@dataclass
class LoadersPaths:
    """Type-safe path management for the loaders module."""

    # Base directory for the project
    base_dir: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official"))

    # Auto-generated paths from pyproject.toml
    api_reference: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/API_REFERENCE.md"))
    architecture: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/ARCHITECTURE.md"))
    chunker: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/chunker"))
    core: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/core"))
    docs: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/docs"))
    embeddings: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/embeddings"))
    enrichers: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/enrichers"))
    finalizing_plan: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/FINALIZING_PLAN.md"))
    readme: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/README.md"))
    reorganization_plan: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/REORGANIZATION_PLAN.md"))
    scripts: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/scripts"))
    test_results: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/TEST_RUN_RESULTS"))
    test_results_after: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/TEST_RUN_RESULTS_AFTER_REORG"))
    tests: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/tests"))
    trash: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/TRASH"))
    utils: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/utils"))
    validators: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/validators"))
    vector_store: Path = field(default_factory=lambda: Path("/home/lasse/Documents/CoT_official/python-template-generator/loaders/vector_store"))

    def validate_paths(self) -> None:
        """Validate that critical directories exist."""
        critical_dirs = [self.core, self.enrichers, self.validators, self.utils, self.scripts]
        for dir_path in critical_dirs:
            if not dir_path.exists():
                print(f"Warning: Directory does not exist: {dir_path}")

    def create_directories(self) -> None:
        """Create all directories if they don't exist."""
        for field_name in self.__dataclass_fields__:
            if field_name == "base_dir":
                continue
            path = getattr(self, field_name)
            if path.suffix == "":  # It's a directory, not a file
                path.mkdir(parents=True, exist_ok=True)

    def __getitem__(self, key: str) -> Path:
        """Allow dictionary-style access to paths."""
        return getattr(self, key)

    def to_dict(self) -> Dict[str, Path]:
        """Convert all paths to a dictionary."""
        return {
            field_name: getattr(self, field_name)
            for field_name in self.__dataclass_fields__
        }