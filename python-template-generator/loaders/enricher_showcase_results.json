{
  "ENRICHED_EXTENSION_PLAN.md": {
    "file": "ENRICHED_EXTENSION_PLAN.md",
    "parent_features": {
      "sections": 94,
      "requirements": 0,
      "checklists": 0,
      "tables": 0
    },
    "code_extraction": {
      "total_blocks": 21,
      "languages": {
        "python": 28,
        "unspecified": 1
      },
      "sections_with_code": [
        "3.-comprehensive-pattern-set:",
        "file-structure",
        "implementation-plan:",
        "1.1-base-enhanced-class",
        "unit-tests",
        "1.-multi-example-splitting-algorithm:",
        "configuration-options",
        "2.-context-extraction-with-node-tracking:",
        "integration-with-semantic-engine",
        "basic-usage",
        "migration-path",
        "1.2-extended-pydantic-models",
        "model:",
        "technical-solution:",
        "implementation:"
      ]
    },
    "example_detection": {
      "good_examples": [
        {
          "language": "python",
          "section": "3.-comprehensive-pattern-set:",
          "preview": "    r'Do this:',     r'YES:',     # Context patter...",
          "context": true,
          "split": true
        },
        {
          "language": "python",
          "section": "3.-comprehensive-pattern-set:",
          "preview": "    r'good example',...",
          "context": true,
          "split": true
        },
        {
          "language": "python",
          "section": "3.-comprehensive-pattern-set:",
          "preview": "    r'best practice',...",
          "context": true,
          "split": true
        },
        {
          "language": "python",
          "section": "3.-comprehensive-pattern-set:",
          "preview": "    r'recommended approach' ]  ENHANCED_BAD_PATTER...",
          "context": true,
          "split": true
        },
        {
          "language": "python",
          "section": "3.-comprehensive-pattern-set:",
          "preview": "    r'Don\\'t do this:',     r'NO:',...",
          "context": true,
          "split": true
        }
      ],
      "bad_examples": [
        {
          "language": "python",
          "section": "3.-comprehensive-pattern-set:",
          "preview": "    r'Anti-pattern:',     # Context patterns...",
          "context": true,
          "split": true
        },
        {
          "language": "python",
          "section": "3.-comprehensive-pattern-set:",
          "preview": "    r'bad example',...",
          "context": true,
          "split": true
        },
        {
          "language": "python",
          "section": "3.-comprehensive-pattern-set:",
          "preview": "    r'avoid this',...",
          "context": true,
          "split": true
        },
        {
          "language": "python",
          "section": "3.-comprehensive-pattern-set:",
          "preview": "    r'common mistake' ] ...",
          "context": true,
          "split": true
        }
      ],
      "neutral": 20,
      "patterns_found": [
        "best\\s+practice",
        "anti-pattern",
        "good\\s+example",
        "bad\\s+example",
        "recommended\\s+approach",
        "avoid\\s+this",
        "do\\s+this",
        "common\\s+mistake"
      ]
    },
    "splitting": {
      "multi_example_blocks": 9,
      "total_after_split": 29
    },
    "context": {
      "with_context": 29,
      "coverage": "100.0%",
      "samples": [
        {
          "code": "class MinimalEnhancedEnricher(...",
          "before": "Section: 1.1 Base Enhanced Class...",
          "after": "None"
        },
        {
          "code": "class MinimalEnhancedDoc(Markd...",
          "before": "Section: 1.2 Extended Pydantic Models...",
          "after": "None"
        },
        {
          "code": "# Implemented in minimal_enhan...",
          "before": "Section: Implementation:...",
          "after": "None"
        }
      ]
    }
  },
  "CLAUDE.md": {
    "file": "CLAUDE.md",
    "parent_features": {
      "sections": 103,
      "requirements": 0,
      "checklists": 0,
      "tables": 0
    },
    "code_extraction": {
      "total_blocks": 23,
      "languages": {
        "bash": 13,
        "python": 12,
        "yaml": 1
      },
      "sections_with_code": [
        "example:-input-validation-(no-assumptions)",
        "example-edge-case-test",
        "documentation-enforcement",
        "adding-a-package",
        "architecture-&-structure-(strict)",
        "quality-assurance",
        "nox-configuration-example",
        "bad-vs-good-script-running-examples",
        "code-quality-rules",
        "ai-agent-security-&-standards",
        "example-pattern-with-no-assumptions",
        "environment-configuration-example",
        "stop!-complete-these-steps-before-responding-to-any-user-request:",
        "example:-configuration-validation",
        "running-commands-in-the-environment",
        "pre-commit-configuration"
      ]
    },
    "example_detection": {
      "good_examples": [
        {
          "language": "bash",
          "section": "stop!-complete-these-steps-before-responding-to-any-user-request:",
          "preview": "uv run scripts/check_task_completions.py ...",
          "context": true,
          "split": false
        },
        {
          "language": "bash",
          "section": "bad-vs-good-script-running-examples",
          "preview": "# Good example of running a python script uv run s...",
          "context": true,
          "split": true
        },
        {
          "language": "python",
          "section": "example:-input-validation-(no-assumptions)",
          "preview": "# \u2705 GOOD: Validates structure and content def proc...",
          "context": true,
          "split": true
        },
        {
          "language": "python",
          "section": "example:-configuration-validation",
          "preview": "# \u2705 GOOD: Validates and fails explicitly API_KEY =...",
          "context": true,
          "split": true
        },
        {
          "language": "bash",
          "section": "documentation-enforcement",
          "preview": "# Check task completions uv run scripts/check_task...",
          "context": true,
          "split": false
        },
        {
          "language": "python",
          "section": "architecture-&-structure-(strict)",
          "preview": "# \u2705 GOOD: Flattened logic def process():     if no...",
          "context": true,
          "split": true
        }
      ],
      "bad_examples": [
        {
          "language": "bash",
          "section": "bad-vs-good-script-running-examples",
          "preview": "# Bad example of running python script python scri...",
          "context": true,
          "split": true
        },
        {
          "language": "python",
          "section": "example:-input-validation-(no-assumptions)",
          "preview": "# \u274c BAD: Assumes data structure def process_user_i...",
          "context": true,
          "split": true
        },
        {
          "language": "python",
          "section": "example:-configuration-validation",
          "preview": "# \u274c BAD: Assumes environment variable exists API_K...",
          "context": true,
          "split": true
        },
        {
          "language": "python",
          "section": "architecture-&-structure-(strict)",
          "preview": "# \u274c BAD: Too deeply nested def process():     if c...",
          "context": true,
          "split": true
        },
        {
          "language": "python",
          "section": "code-quality-rules",
          "preview": "# BAD: These patterns are forbidden for security r...",
          "context": true,
          "split": true
        }
      ],
      "neutral": 15,
      "patterns_found": [
        "#\\s*\u2705\\s*Good",
        "#\\s*\u274c\\s*BAD",
        "good\\s+example",
        "bad\\s+example",
        "#\\s*BAD:",
        "^\u2705",
        "#\\s*\u274c\\s*Bad",
        "#\\s*\u2705\\s*GOOD",
        "#\\s*Bad:"
      ]
    },
    "splitting": {
      "multi_example_blocks": 9,
      "total_after_split": 26
    },
    "context": {
      "with_context": 26,
      "coverage": "100.0%",
      "samples": [
        {
          "code": "uv run scripts/check_task_comp...",
          "before": "\u2705 Verify all completed tasks have summaries run:...",
          "after": "None"
        },
        {
          "code": "# Example of adding a dependen...",
          "before": "**ALWAYS** USE `uv add` to install a dependency...",
          "after": "Installing a development dependency..."
        },
        {
          "code": "# Example of adding a developm...",
          "before": "**ALWAYS** USE `uv add` to install a dependency...",
          "after": "Installing a development dependency..."
        }
      ]
    }
  },
  "CHAIN_OF_THOUGHT_LIGHT.md": {
    "file": "CHAIN_OF_THOUGHT_LIGHT.md",
    "parent_features": {
      "sections": 29,
      "requirements": 0,
      "checklists": 0,
      "tables": 0
    },
    "code_extraction": {
      "total_blocks": 12,
      "languages": {
        "markdown": 9,
        "unspecified": 3
      },
      "sections_with_code": [
        "example-1:-simple-bug-fix",
        "example-3:-refactoring-decision",
        "example-2:-feature-addition",
        "full-cot-(complex-tasks)",
        "don't-do-this:",
        "minimal-cot-(simple-tasks)",
        "citation-format",
        "risk-indicators",
        "standard-cot-(medium-tasks)",
        "do-this-instead:"
      ]
    },
    "example_detection": {
      "good_examples": [
        {
          "language": "markdown",
          "section": "do-this-instead:",
          "preview": "// Good CoT **Task**: Extract validation logic fro...",
          "context": true,
          "split": false
        }
      ],
      "bad_examples": [],
      "neutral": 10,
      "patterns_found": [
        "do\\s+this"
      ]
    },
    "splitting": {
      "multi_example_blocks": 0,
      "total_after_split": 12
    },
    "context": {
      "with_context": 12,
      "coverage": "100.0%",
      "samples": [
        {
          "code": "## \ud83e\udde0 Quick Reasoning\n\n**Task**...",
          "before": "Section: Minimal CoT (Simple Tasks)...",
          "after": "None"
        },
        {
          "code": "## \ud83e\udde0 Reasoning\n\n### Task: Extr...",
          "before": "Section: Standard CoT (Medium Tasks)...",
          "after": "None"
        },
        {
          "code": "## \ud83e\udde0 Full Reasoning\n\n### Task:...",
          "before": "Section: Full CoT (Complex Tasks)...",
          "after": "None"
        }
      ]
    }
  },
  "ENCODING_ERROR_PREVENTION.md": {
    "file": "ENCODING_ERROR_PREVENTION.md",
    "parent_features": {
      "sections": 9,
      "requirements": 0,
      "checklists": 0,
      "tables": 0
    },
    "code_extraction": {
      "total_blocks": 9,
      "languages": {
        "unspecified": 3,
        "bash": 3,
        "python": 1,
        "json": 1,
        "yaml": 1,
        "markdown": 1
      },
      "sections_with_code": [
        "detection-commands",
        "claude.md-addition",
        "ide-configuration",
        "file-creation-rules",
        "safe-file-creation-template"
      ]
    },
    "example_detection": {
      "good_examples": [
        {
          "language": "",
          "section": "file-creation-rules",
          "preview": "\u2705 PREFER: ASCII characters or well-supported emoji...",
          "context": true,
          "split": true
        }
      ],
      "bad_examples": [
        {
          "language": "",
          "section": "file-creation-rules",
          "preview": "\u274c AVOID: Special Unicode symbols in titles (\u27a4, \u279c, ...",
          "context": true,
          "split": true
        }
      ],
      "neutral": 8,
      "patterns_found": [
        "^\u274c",
        "^\u2705"
      ]
    },
    "splitting": {
      "multi_example_blocks": 2,
      "total_after_split": 10
    },
    "context": {
      "with_context": 10,
      "coverage": "100.0%",
      "samples": [
        {
          "code": "\u274c AVOID: Special Unicode symbo...",
          "before": "**Safe character usage**:...",
          "after": "**When using emoji or special characters**:..."
        },
        {
          "code": "\u2705 PREFER: ASCII characters or ...",
          "before": "**Safe character usage**:...",
          "after": "**When using emoji or special characters**:..."
        },
        {
          "code": "# Always validate encoding aft...",
          "before": "**Safe character usage**:...",
          "after": "**When using emoji or special characters**:..."
        }
      ]
    }
  }
}