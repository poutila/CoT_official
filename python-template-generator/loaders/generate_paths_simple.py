#!/usr/bin/env python3
"""Simple path generation for the loaders module based on PTOOL's approach."""

import tomllib
from pathlib import Path
from typing import Dict, Any


def load_paths_from_pyproject() -> Dict[str, str]:
    """Load path configuration from pyproject.toml."""
    pyproject_path = Path(__file__).parent.parent.parent / "pyproject.toml"
    
    print(f"Reading from: {pyproject_path}")
    
    with open(pyproject_path, "rb") as f:
        pyproject = tomllib.load(f)
    
    # Get paths configuration
    tool_config = pyproject.get("tool", {}).get("project_paths", {})
    paths = tool_config.get("paths", {})
    files = tool_config.get("files", {})
    
    # Merge paths and files
    all_paths = {**paths, **files}
    
    # Filter for loaders-specific paths
    loaders_paths = {k: v for k, v in all_paths.items() if k.startswith("loaders_")}
    
    return loaders_paths


def generate_static_paths_file(paths: Dict[str, str], base_dir: Path) -> str:
    """Generate the static paths dataclass file content."""
    
    lines = [
        '"""Auto-generated paths dataclass for the loaders module.',
        '',
        'DO NOT EDIT THIS FILE MANUALLY!',
        'Generated from pyproject.toml [tool.project_paths] configuration.',
        'To regenerate, run: python generate_paths_simple.py',
        '"""',
        '',
        'from pathlib import Path',
        'from dataclasses import dataclass, field',
        'from typing import Dict',
        '',
        '',
        '@dataclass',
        'class LoadersPaths:',
        '    """Type-safe path management for the loaders module."""',
        '',
        '    # Base directory for the project',
        f'    base_dir: Path = field(default_factory=lambda: Path("{base_dir}"))',
        '',
        '    # Auto-generated paths from pyproject.toml',
    ]
    
    # Add each path as a field
    for field_name, path_value in sorted(paths.items()):
        # Remove 'loaders_' prefix for cleaner field names
        clean_name = field_name.replace('loaders_', '')
        full_path = base_dir / path_value
        lines.append(f'    {clean_name}: Path = field(default_factory=lambda: Path("{full_path}"))')
    
    # Add utility methods
    lines.extend([
        '',
        '    def validate_paths(self) -> None:',
        '        """Validate that critical directories exist."""',
        '        critical_dirs = [self.core, self.enrichers, self.validators, self.utils, self.scripts]',
        '        for dir_path in critical_dirs:',
        '            if not dir_path.exists():',
        '                print(f"Warning: Directory does not exist: {dir_path}")',
        '',
        '    def create_directories(self) -> None:',
        '        """Create all directories if they don\'t exist."""',
        '        for field_name in self.__dataclass_fields__:',
        '            if field_name == "base_dir":',
        '                continue',
        '            path = getattr(self, field_name)',
        '            if path.suffix == "":  # It\'s a directory, not a file',
        '                path.mkdir(parents=True, exist_ok=True)',
        '',
        '    def __getitem__(self, key: str) -> Path:',
        '        """Allow dictionary-style access to paths."""',
        '        return getattr(self, key)',
        '',
        '    def to_dict(self) -> Dict[str, Path]:',
        '        """Convert all paths to a dictionary."""',
        '        return {',
        '            field_name: getattr(self, field_name)',
        '            for field_name in self.__dataclass_fields__',
        '        }',
    ])
    
    return '\n'.join(lines)


def main():
    """Generate the static paths file."""
    print("=" * 60)
    print("Generating Static Paths for Loaders Module")
    print("=" * 60)
    
    # Load paths from pyproject.toml
    paths = load_paths_from_pyproject()
    
    print(f"\nFound {len(paths)} loaders-specific paths:")
    for name in sorted(paths.keys()):
        print(f"  - {name}")
    
    # Determine base directory (project root)
    base_dir = Path(__file__).parent.parent.parent.absolute()
    print(f"\nBase directory: {base_dir}")
    
    # Generate the file content
    content = generate_static_paths_file(paths, base_dir)
    
    # Write to file
    output_path = Path(__file__).parent / "project_paths.py"
    output_path.write_text(content)
    
    print(f"\n✅ Successfully generated: {output_path}")
    print(f"   File size: {len(content)} bytes")
    print(f"   Lines: {len(content.splitlines())}")
    
    # Test import
    print("\nTesting import...")
    try:
        # Add current dir to path for import
        import sys
        sys.path.insert(0, str(Path(__file__).parent))
        from project_paths import LoadersPaths
        
        paths_instance = LoadersPaths()
        print("✅ Import successful!")
        print(f"   Example path - core: {paths_instance.core}")
        print(f"   Example path - tests: {paths_instance.tests}")
        
    except Exception as e:
        print(f"❌ Import failed: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())